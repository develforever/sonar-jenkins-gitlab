
services:
    gitlab:
        container_name: gitlab
        build:
            context: .docker/gitlab
            dockerfile: Dockerfile
        hostname: 'gitlab.localhost'
        ports:
            - '8081:8081'
            - '443:443'
            - '2224:2224'
        volumes:
            - gitlab-config:/etc/gitlab
            - gitlab-logs:/var/log/gitlab
            - gitlab-data:/var/opt/gitlab
        networks:
            - dev-ci
        secrets:
            - gitlab_root_password
        depends_on:
            - postgres
        healthcheck:
          test: ["CMD", "curl", "-f", "http://localhost:8081/users/sign_in"]
          interval: 60s
          timeout: 10s
          retries: 3
          start_period: 3m
    
    gitlab-runner:
      build:
            context: .docker/gitlab-runner
            dockerfile: Dockerfile
      container_name: gitlab-runner
      restart: always
      volumes:
        - gitlab-runner-config:/etc/gitlab-runner
        - /var/run/docker.sock:/var/run/docker.sock
      networks:
          - dev-ci

    gitlab-runner2:
      build:
            context: .docker/gitlab-runner2
            dockerfile: Dockerfile
      container_name: gitlab-runner2
      restart: always
      volumes:
        - gitlab-runner-config2:/etc/gitlab-runner
        - /var/run/docker.sock:/var/run/docker.sock
      networks:
          - dev-ci

    # Usługa bazy danych PostgreSQL
    postgres:
        image: postgres:14
        container_name: gitlab-postgres
        environment:
            POSTGRES_USER: gitlab
            POSTGRES_PASSWORD: your_db_password
            POSTGRES_DB: gitlabhq_production
        volumes:
            - gitlab-postgres:/var/lib/postgresql/data
        networks:
            - dev-ci

    # Usługa Redis
    redis:
        image: redis:latest
        container_name: gitlab-redis
        volumes:
            - gitlab-redis:/data
        networks:
            - dev-ci

    jenkins:
        container_name: jenkins
        hostname: 'jenkins.localhost'
        build:
            context: .docker/jenkins
            dockerfile: Dockerfile
        ports:
            - '8082:8082'
            - '50000:50000'
        volumes:
            - jenkins_home:/var/jenkins_home
        environment:
            JENKINS_OPTS: '--httpPort=8082'
            JAVA_OPTS: '-Djenkins.install.runSetupWizard=false'
            JENKINS_ADMIN_ID: admin
            JENKINS_ADMIN_PASSWORD: admin_password
        networks:
            - dev-ci

    jenkins-agent:
        container_name: jenkins-agent
        build:
            context: .docker/jenkins-agent
            dockerfile: Dockerfile
        environment:
            JENKINS_URL: 'http://jenkins:8082'
            JENKINS_AGENT_NAME: 'ci-agent'
            JENKINS_AGENT_WORKDIR: '/home/jenkins/agent'
            JENKINS_SECRET: 'b3dfb72a22fa0a5dcf8817c2b04ebec56165ec81a9b11712c9bc9ac092609661'
        volumes:
            - jenkins_agent_workdir:/home/jenkins/agent
            - '.docker/jenkins-agent/id_rsa:/home/jenkins/.ssh/id_rsa'
        networks:
            - dev-ci
        depends_on:
            - jenkins

    sonarqube:
        container_name: sonarqube
        hostname: sonarqube.localhost
        build:
            context: .docker/sonarqube
            dockerfile: Dockerfile
        depends_on:
            - db
        ports:
            - '9000:9000' 
        environment:
            SONAR_JDBC_URL: jdbc:postgresql://db:5432/sonar
            SONAR_JDBC_USERNAME: sonar
            SONAR_JDBC_PASSWORD: sonar_password
        volumes:
            - sonarqube_data:/opt/sonarqube/data
            - sonarqube_extensions:/opt/sonarqube/extensions
            - sonarqube_logs:/opt/sonarqube/logs
        networks:
            - dev-ci

    # Usługa bazy danych PostgreSQL
    db:
        image: postgres:14
        container_name: sonarqube-db
        environment:
            POSTGRES_USER: sonar
            POSTGRES_PASSWORD: sonar_password
            POSTGRES_DB: sonar
        volumes:
            - postgresql_data:/var/lib/postgresql/data
        networks:
            - dev-ci

    opengrok:
        container_name: opengrokci
        build:
            context: .docker/opengrok
            dockerfile: Dockerfile
        ports:
            - '7080:8080/tcp'
        environment:
            SYNC_PERIOD_MINUTES: '60'
        volumes:
            - '.docker/opengrok/id_rsa:/root/.ssh/id_rsa'
            - './repos:/opengrok/src/'
            - '.docker/opengrok/etc/:/opengrok/etc/'
            - '.docker/opengrok/data/:/opengrok/data/'
        depends_on:
            gitlab: 
                condition: service_healthy
                restart: true
        networks:
          - dev-ci

networks:
    dev-ci:

secrets:
    gitlab_root_password:
        file: ./.docker/gitlab/root_password.tx

volumes:
    gitlab-config:
    gitlab-logs:
    gitlab-data:
    gitlab-postgres:
    gitlab-redis:
    jenkins_home:
    jenkins_agent_workdir:
    sonarqube_data:
    sonarqube_extensions:
    sonarqube_logs:
    postgresql_data:
    opengrok_src:
    opengrock_etc:
    opengrock_data:
    gitlab-runner-config:
    gitlab-runner-config2:
